//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include <behaviors/num_word.dtsi>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"

#define BASE        0
#define NAV         1
#define NUM         2
#define SYM         3
#define FUN         4
#define UTL         5

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define CANCEL      &kp K_CANCEL // Cancel caps-word & auto-layers.

#define HYP LS(LC(LA(LGUI)))
#define MEH LS(LC(LALT))

#define QUICK_TAP_MS 175

// Tap: sticky-shift | Shift + tap/ double-tap: caps-word | Hold: shift.
ZMK_MOD_MORPH(smart_shft,
  bindings = <&sk LSHFT>, <&caps_word>;
  mods = <(MOD_LSFT)>;
)

// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
              tapping-term-ms = <200>;)

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

/ {
    combos {
        compatible = "zmk,combos";

        Copy {
            bindings = <&kp LG(C)>;
            key-positions = <LB3 LB2>;
        };

        Paste {
            bindings = <&kp LG(V)>;
            key-positions = <LB2 LB1>;
        };
        
        Cut {
            bindings = <&kp LG(X)>;
            key-positions = <LB3 LB1>;
        };

        Escape {
            bindings = <&kp ESC>;
            key-positions = <LM3 LM1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
         &kp Q  &kp W  &kp E  &kp R           &kp T    &kp Y  &kp U      &kp I          &kp O    &kp P
         &kp A  &hml LCTRL S  &hml LALT D  &hml LGUI F           &kp G    &kp H  &hmr RGUI J      &hmr RALT K          &hmr RCTRL L    &kp SEMICOLON
&kp TAB  &kp Z  &kp X  &kp C  &kp V           &kp B    &kp N  &kp M      &kp COMMA      &kp DOT  &kp SLASH      &kp ENTER
                       &mo SYM  &smart_shft  SMART_NUM    &mo NAV  &hmr MEH SPACE  &hmr HYP BACKSPACE
            >;
        };

        Navigation {
            bindings = <
       &none  &none     &kp UP_ARROW  &none      &kp LBRC    &kp RBRC  &none          &none          &none      &none
       &none  &kp LEFT  &kp DOWN      &kp RIGHT  &kp LBKT    &kp RBKT  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RCTRL  &none
&none  &none  &none     &none         &none      &kp LPAR    &kp RPAR  &none          &none          &none      &none  &none
                        &none         &none      &none       &none     &none          &none
            >;
        };

        Number {
            bindings = <
        &trans     &trans    &trans        &trans        &trans       &trans  &kp N7  &kp N8  &kp N9  &trans
        &kp EQUAL  &kp FSLH  &kp LS(STAR)  &kp LS(PLUS)  &kp MINUS    &kp N0  &kp N4  &kp N5  &kp N6  &trans
&trans  &trans     &trans    &trans        &trans        &trans       &none   &kp N1  &kp N2  &kp N3  &trans  &trans
                             &trans        &trans        CANCEL       &trans  &trans  &trans
            >;
        };

        Symbol {
            bindings = <
        &kp EXCL  &kp AT     &kp HASH      &kp DOLLAR    &kp PERCENT    &kp CARET  &kp AMPERSAND   &kp ASTERISK  &kp SQT   &kp DQT
        &none     &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &none          &none      &none           &none         &none     &kp BSLH
&trans  &none     &none      &none         &none         &none          &kp MINUS  &kp UNDERSCORE  &kp TILDE     &kp PIPE  &kp SLASH  &kp HOME
                             &trans        &trans        &trans         &trans     &trans          &trans
            >;
        };

        Function {
            bindings = <
        &kp K_POWER  &none       &kp C_VOL_UP  &kp C_PLAY_PAUSE  &none    &none  &kp F7  &kp F8  &kp F9  &kp F10
        &none        &kp C_PREV  &kp C_VOL_DN     &kp C_NEXT        &none    &none  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &none        &none       &kp C_MUTE       &none             &none    &none  &kp F1  &kp F2  &kp F3  &kp F12  &none
                                 &none            &none             &none    &none  &none   &none
            >;
        };

        Utility {
            bindings = <
        &trans  &trans  &trans  &trans  &bt BT_CLR    &trans  &trans        &trans        &trans        &trans
        &trans  &trans  &trans  &trans  &trans        &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
&trans  &trans  &trans  &trans  &trans  &trans        &trans  &trans        &trans        &trans        &trans        &trans
                        &trans  &trans  &trans        &trans  &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        FunctionLayer {
            if-layers = <NAV NUM>;
            then-layer = <FUN>;
        };

        UtilityLayer {
            if-layers = <NAV SYM>;
            then-layer = <UTL>;
        };
    };
};
